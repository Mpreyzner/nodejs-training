#!/usr/bin/env node

'use strict';

const app = require('../app/user_app.js')
    , debug = require('debug')('intern2-node-register-kornel:server')
    , http = require('http')
    , async = require('async')

    , MongoDb = require('../lib/mongo_db')
    , mongoDb = new MongoDb({connectionUri: process.env.MONGODB_URI, modelDir: `../models`})

    , port = parseInt(process.env.PORT || '3000', 10)
    , server = http.createServer(app)
    , RabbitMq = require('../lib/rabbit_mq.js')
    , rabbitMq = new RabbitMq({connectionUri: process.env.RABBITMQ_URI})
    , _ = require('lodash')
    , nodemailer = require('nodemailer')
;

app.set('port', port);
app.set('db', mongoDb);

async.waterfall([
    // INIT MONGODB CONNECTION
    (next) => {
        mongoDb.init((err) => {
            if (err) {
                console.error(`MongoDb initialization error: ${err.message}`);
                return next(err);
            }

            next(null);
        });
    },

    (next) => {
        // INIT RABBIT CONNECTION
        rabbitMq.init((err) => {
            if (err) {
                console.error(`rabbitMq initialization error: ${err.message}`);
                return next(err);
            }

            next(null);
        });
    },
    (next) => {

        const params = {
            exchange: {
                name: `ex-events-${_.snakeCase(process.env.TEAM_NAME)}`,
                type: 'topic'
            }
        };
        rabbitMq.getPublisher(params, (err, publisher) => {
            if (err) {
                console.error(`Failed to launch publisher: ${err.message}`);
                return next(err);
            }
            app.set('publisher', publisher);
            next();

        });
    },
    // INIT HTTP SERVER
    (next) => {
        server.listen(port);

        server.once('error', (err) => {
            if (err) {
                console.error(`Http server initialization error: ${err.message}`);
                return next(err);
            }

            next(null);
        });

        server.once('listening', next);
    }

], (err) => {
    if (err) {
        process.exit(1);
    }

    console.log(`USER_API http server initialized - listening @ :${port}`);
});
